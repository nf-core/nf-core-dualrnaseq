/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/dualrnaseq Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// --------------
// Pipeline manifest
// --------------
manifest {
    name            = 'nf-core/dualrnaseq'
    author          = """Bozena Mika-Gospodorz and Regan Hayward"""
    homePage        = 'https://github.com/nf-core/dualrnaseq'
    description     = """Dual RNA-seq pipeline"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.1'
    version         = '2.0dev'
    doi             = ''
}



// Global default params, used in configs
params {



    // --------------
    // Input/Output options
    // --------------
    input                      = null //CHANGE TO DEFAULT LOCATION
    outdir                     = null


    // --------------
    // Run workflows
    // --------------
    // A default run will include the following software:
    // Fastqc, Cutadapt, Fastqc (after trimming), Salmon SA, mapping stats
    // To add or remove software, change the following flags/params
    run_salmon_selective_alignment = true
    run_salmon_alignment_based_mode = false //true
    skip_tools                 = null


    // --------------
    // Reference files
    // --------------
    
    // Host
    fasta_host                 = null
    transcript_fasta_host      = null

    // Pathogen
    transcript_fasta_pathogen  = null

    // Misc
    genome                     = null


    // --------------
    // Features to extract from reference files - MOVE TO EACH PIECE OF SOFTWARE
    // --------------

    // Host
    host_gff_attribute                              = 'gene_id'
    gene_feature_gff_to_quantify_host               = ["exon", "tRNA"]
    extract_annotations_host_salmon_feature         = 'exon' //'quant'
    extract_annotations_host_salmon_attribute       = 'Parent'  // currently it is required to pass value with capital letter
    host_organism = 'host' // Change to custom name if desired, ie Human_hela_cells

    // Pathogen
    pathogen_gff_attribute     = 'locus_tag'
    gene_feature_gff_to_quantify_pathogen = ["gene", "sRNA", "tRNA", "rRNA"]
    pathogen_organism = 'pathogen' // Change to custom name if desired, ie Salmonella_SL1344

    // Misc
    htseq_quantifier = 'quant'
    // read_transcriptome_fasta_host_from_file = false
    // read_transcriptome_fasta_pathogen_from_file = false


    // --------------
    // iGenomes
    // --------------
    igenomes_base              = 's3://ngi-igenomes/igenomes'
    igenomes_ignore            = false
    

    // --------------
    // Software options
    // -------------- 
    
    // Fastqc
    fastqc_args = null
    
    // Cutadapt
    cutadapt_args = null  // additional params to send to cutadapt, enclosed within ''

    // Salmon general
    libtype = 'A'
    gene_feature_gff_to_create_transcriptome_host   = ["exon", "tRNA"]
    gene_attribute_gff_to_create_transcriptome_host = "transcript_id"
    gene_feature_gff_to_create_transcriptome_pathogen = ["gene", "sRNA", "tRNA", "rRNA"]
    gene_attribute_gff_to_create_transcriptome_pathogen = "locus_tag"
    

    // Salmon selective alignment
    salmon_sa_index_args = '-k 21'
    salmon_sa_args = '--softclipOverhangs'

    salmon_ab_args = null



    // --------------
    // MultiQC options
    // -------------- 
    multiqc_config             = null
    multiqc_title              = null
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'
    multiqc_methods_description = null

    // --------------
    // Boilerplate options
    // --------------
    tracedir                   = "${params.outdir}/pipeline_info"
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    hook_url                   = null
    help                       = false
    version                    = false
    validate_params            = true  // Schema validation default options
    show_hidden_params         = false
    schema_ignore_params       = 'genomes'


    // --------------
    // STAR parameters
    // --------------
    outSAMunmapped             = 'Within'
    outSAMattributes           = 'Standard'
    sjdbGTFfeatureExon         = 'quant'
    sjdbGTFtagExonParentTranscript = 'parent'
    quantMode                  = 'TranscriptomeSAM'
    quantTranscriptomeBan      = 'Singleend'
    outFilterMultimapNmax      = 999
    outFilterType              = 'BySJout'
    limitBAMsortRAM            = 0
    alignSJoverhangMin         = 8
    alignSJDBoverhangMin       = 1
    outFilterMismatchNmax      = 999
    outFilterMismatchNoverReadLmax = 1
    alignIntronMin             = 20
    alignIntronMax             = 1000000
    alignMatesGapMax           = 1000000
    winAnchorMultimapNmax      = 999



    // --------------
    // Config options
    // --------------
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    config_profile_name        = null


    // --------------
    // Max resource options
    // --------------
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

}


// --------------
// Custom args to each piece of software
// --------------

// putting this here as got an error with trying to pass the args to the cutadapt module from dualrnaseq.nf
// kept getting this error:  Process `NFCORE_DUALRNASEQ:DUALRNASEQ:CUTADAPT` declares 1 input channel but 2 were specified
// tried [] brackets, but to no avail
// for example:
// CUTADAPT([INPUT_CHECK.out.reads]) {
//         task.ext.args = params.cutadapt_params ?: ''
//     }
process {
    withName: 'CUTADAPT' {
        ext.args = params.cutadapt_args ?: ''
    }

    withName: 'FASTQC' {
        ext.args = params.fastqc_args ?: ''
    }

    withName: 'FASTQC_AFTER_TRIMMING' {
        ext.args = params.fastqc_args ?: ''
    }
}


// --------------
// Load base.config by default for all pipelines
// --------------
includeConfig 'conf/base.config'

// --------------
// Load nf-core custom profiles from different Institutions
// --------------
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// --------------
// Load nf-core/dualrnaseq custom profiles from different institutions.
// --------------

// Warning: Uncomment only if a pipeline-specific instititutional config already exists on nf-core/configs!
// try {
//   includeConfig "${params.custom_config_base}/pipeline/dualrnaseq.config"
// } catch (Exception e) {
//   System.err.println("WARNING: Could not load nf-core/config/dualrnaseq profiles: ${params.custom_config_base}/pipeline/dualrnaseq.config")
// }



// --------------
// Profiles
// --------------
profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        // docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 16
        executor.memory        = 60.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
    test_hackathon { includeConfig 'conf/test_hackathon.config' }

}


// --------------
// Load igenomes.config if required
// --------------
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}


// --------------
// Env variables
// --------------
// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// --------------
// Capture exit codes from upstream processes when piping
// --------------
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}


// --------------
// Load modules.config for DSL2 module specific options
// --------------
includeConfig 'conf/modules.config'


// --------------
// Function to ensure that resource requirements don't go beyond
// a maximum limit
// --------------
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

